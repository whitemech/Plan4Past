#!/usr/bin/env python3
import argparse
import datetime
import inspect
import os
import signal
from pathlib import Path
from subprocess import Popen, TimeoutExpired
from tempfile import TemporaryDirectory

SUPPORTED_PLANNERS = {
    "mynd"
}

BIN_DIR = Path(inspect.getframeinfo(inspect.currentframe()).filename).parent
REPO_ROOT = BIN_DIR.parent
MYND_WRAPPER_PATH = BIN_DIR / "mynd_wrapper"

MYND_DIR = (REPO_ROOT / "third_party" / "MyNDPlanner").resolve()  # type: ignore
MYND_SRC_DIR = MYND_DIR / "src"


def launch(cmd, cwd=None):
    """Launch a command."""
    process = Popen(
        args=cmd,
        preexec_fn=os.setsid,
        encoding="utf-8",
        cwd=cwd,
    )
    try:
        process.wait(timeout=30)
    except TimeoutExpired:
        os.killpg(os.getpgid(process.pid), signal.SIGTERM)
    finally:
        if process.returncode != 0:
            raise Exception(f"return code {process.returncode}")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Wrapper for FOND4LTLfPLTLf.")
    parser.add_argument('-d', dest='domain_path', type=Path, required=True)
    parser.add_argument('-p', dest='problem_path', type=Path, required=True)
    parser.add_argument('-g', dest='goal', type=str, required=True)
    parser.add_argument('-t', dest='planner', type=str, choices=SUPPORTED_PLANNERS, required=True)
    args = parser.parse_args()

    start = datetime.datetime.now()
    with TemporaryDirectory() as tmpdir:
        new_domain_file = Path(tmpdir) / "new_domain.pddl"
        new_problem_file = Path(tmpdir) / "new_problem.pddl"
        launch(["fond4ltlfpltlf",
                "-d", args.domain_path,
                "-p", args.problem_path,
                "-g", args.goal,
                "-outd", new_domain_file,
                "-outp", new_problem_file,
                ])

        cli_args = []
        if args.planner == "mynd":
            print("Warning: using strong planning")
            cli_args = [str(MYND_WRAPPER_PATH),
                        "-d", str(new_domain_file),
                        "-p", str(new_problem_file),
                        "-s", "0"]
        else:
            raise ValueError
        launch(cli_args)
    # some code
    end = datetime.datetime.now()
    elapsed = end - start
    print(f"Total time: {elapsed.total_seconds()} seconds")
