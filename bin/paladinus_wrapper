#!/usr/bin/env python3
import argparse
import contextlib
import os
import tempfile
from pathlib import Path
from typing import Generator

from bin.utils import launch, PALADINUS_DIR, PALADINUS_JAR, ALGORITHMS, HEURISTICS


@contextlib.contextmanager
def cd(path: os.PathLike) -> Generator:  # pylint: disable=invalid-name
    """Change working directory temporarily."""
    old_path = Path.cwd()
    os.chdir(path)
    try:
        yield
    finally:
        os.chdir(str(old_path))


def plan(domain_path, problem_path, algorithm, heuristic, working_dir):
    """Planning for temporally extended goals (LTLf or PLTLf)."""
    domain_path = str(Path(domain_path).absolute())
    problem_path = str(Path(problem_path).absolute())
    if working_dir:
        working_dir = Path(args.working_dir)
        working_dir.mkdir(exist_ok=True)
    else:
        working_dir = Path(tempfile.mkdtemp())
    planner_command = ['java',
                       "-Xmx4g",
                       '-jar',
                       str(PALADINUS_JAR),
                       '-search',
                       algorithm.upper(),
                       '-heuristic',
                       heuristic.upper(),
                       domain_path,
                       problem_path,
                       ]

    print("Start planner")
    launch(planner_command, cwd=str(PALADINUS_DIR))


if __name__ == '__main__':
    """
    Usage : java -jar [java_options] paladinus0.1.jar -search ITERATIVE_DFS -heuristic FF benchmarks/blocksworld-new/domain.pddl benchmarks/blocksworld-new/p1.pddl
    """
    parser = argparse.ArgumentParser(description="Wrapper for Paladinus.")
    parser.add_argument('-d', dest='domain_path', type=Path, required=True)
    parser.add_argument('-p', dest='problem_path', type=Path, required=True)
    parser.add_argument('-a', "--algorithm", dest='algorithm', type=str, choices=ALGORITHMS, default="iterative_dfs")
    parser.add_argument('--heuristic', dest='heuristic', type=str, choices=HEURISTICS, default="ff")
    parser.add_argument('--working-dir', dest='working_dir', type=str, default=None)
    args = parser.parse_args()

    domain_path = args.domain_path
    problem_path = args.problem_path
    algorithm = args.algorithm
    heuristic = args.heuristic
    working_dir = args.working_dir

    plan(domain_path, problem_path, algorithm, heuristic, working_dir)
