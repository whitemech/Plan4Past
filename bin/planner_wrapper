#!/usr/bin/env python3
import argparse
import contextlib
import os
import tempfile
from pathlib import Path
from typing import Generator

from bin.utils import launch, PLANNER_DIR

PLANNER_DRIVER_FD_CELMCUT = (PLANNER_DIR / "forbiditerative" / "fast-downward.py").resolve()
PLANNER_DRIVER_DELFI = (PLANNER_DIR / "delfi1.img").resolve()
PLANNER_DRIVER_COMPLEMENTARY = (PLANNER_DIR / "complementary1.img").resolve()
PLANNER_DRIVER_MPC = (PLANNER_DIR / "MpC").resolve()

def plan(domain_path, problem_path, working_dir):
    """Planning for temporally extended goals (LTLf or PLTLf)."""
    domain_path = str(Path(domain_path).absolute())
    problem_path = str(Path(problem_path).absolute())
    if working_dir:
        working_dir = Path(args.working_dir)
        working_dir.mkdir(exist_ok=True)
    else:
        working_dir = Path(tempfile.mkdtemp())

    # For optimal_planning    
    # planner_command = [f"{PLANNER_DRIVER_COMPLEMENTARY}",
    #                    str(domain_path),
    #                    str(problem_path),
    #                    working_dir / 'sol'
    #                    ]
    planner_command = [f"{PLANNER_DRIVER_FD_CELMCUT}",
                       str(domain_path),
                       str(problem_path),
                       "--search",
                       f"astar(celmcut())",
                       ]
    # planner_command = [f"{PLANNER_DRIVER_MPC}",
    #                    str(domain_path),
    #                    str(problem_path),
    #                    '-Q'
    #                    ]

    print("Start planner")
    launch(planner_command, cwd=working_dir)


if __name__ == '__main__':
    """
    Usage: python fd_wrapper.py -d <DOMAIN-PATH> -p <PROBLEM-PATH> 
    """
    parser = argparse.ArgumentParser(description="Wrapper for fast forward.")
    parser.add_argument('-d', dest='domain_path', type=Path, required=True)
    parser.add_argument('-p', dest='problem_path', type=Path, required=True)
    #parser.add_argument('-a', "--algorithm", dest='algorithm', type=str, choices=ALGORITHMS, default="astar")
    #parser.add_argument('--heuristic', dest='heuristic', type=str, choices=HEURISTICS, default="ff")
    parser.add_argument('--working-dir', dest='working_dir', type=str, default=None)
    args = parser.parse_args()

    domain_path = args.domain_path
    problem_path = args.problem_path
    #algorithm = args.algorithm
    #heuristic = args.heuristic
    working_dir = args.working_dir

    plan(domain_path, problem_path, working_dir)

    # launch(['rm', 'graph-gs-L-bolded-cs.png'], cwd=None)
    # launch(['rm', 'abstract-structure-graph.txt'], cwd=None)
    # launch(['rm', 'output.sas'], cwd=None)