#!/usr/bin/env python3


import argparse
import datetime
import inspect
import os
import shutil
import tempfile
from pathlib import Path
from tempfile import TemporaryDirectory

from bin.utils import ALGORITHMS, HEURISTICS, PLTLF_WRAPPER_PATH, MYND_WRAPPER_PATH, launch, FD_WRAPPER_PATH, \
    SUPPORTED_PLANNERS, is_valid_file, PALADINUS_WRAPPER_PATH

DEFAULT_OUTPUT_DIR: str = "output"
BIN_DIR = Path(inspect.getframeinfo(inspect.currentframe()).filename).parent
REPO_ROOT = BIN_DIR.parent


def parse_args():
    """Parse command-line arguments."""
    parser = argparse.ArgumentParser("plan4past", description="A FOND planner for temporal goals in PLTLf")
    parser.add_argument("--domain", type=is_valid_file, required=True)
    parser.add_argument("--problem", type=is_valid_file, required=True)
    parser.add_argument("--formula", type=str, required=True)
    parser.add_argument("--map", dest="map_file", type=is_valid_file, default=None, required=False)
    parser.add_argument("--output-dir", type=str, default=DEFAULT_OUTPUT_DIR)
    parser.add_argument('-t', dest='planner', type=str, choices=SUPPORTED_PLANNERS, required=True)
    parser.add_argument('-a', "--algorithm", dest='algorithm', type=str, choices=ALGORITHMS, default="laostar")
    parser.add_argument('--heuristic', dest='heuristic', type=str, choices=HEURISTICS, default="ff")
    parser.add_argument('--working-dir', dest='working_dir', type=str, default=None)
    return parser.parse_args()


if __name__ == '__main__':
    args = parse_args()
    if args.working_dir:
        working_dir = Path(args.working_dir)
        working_dir.mkdir()
    else:
        working_dir = Path(tempfile.mkdtemp())

    start = datetime.datetime.now()

    new_domain_file = working_dir / "new_domain.pddl"
    new_problem_file = working_dir / "new_problem.pddl"
    cli_args =[PLTLF_WRAPPER_PATH,
        "--domain", args.domain,
        "--problem", args.problem,
        "--formula", args.formula,
        "--output-domain", str(new_domain_file),
        "--output-problem", str(new_problem_file),]
    if args.map_file:
        cli_args += ["--map", args.map_file,]
    launch(cli_args)
    end_compilation = datetime.datetime.now()
    elapsed_time_compilation = (end_compilation.timestamp() - start.timestamp())
    print(f"Compilation time: {elapsed_time_compilation} seconds")

    cli_args = []
    if args.planner == "mynd":
        cli_args = [str(MYND_WRAPPER_PATH),
                    "-d", str(new_domain_file),
                    "-p", str(new_problem_file),
                    "-a", str(args.algorithm),
                    "--heuristic", str(args.heuristic),
                    "--working-dir", str(working_dir)]
    elif args.planner == "paladinus":
        cli_args = [str(PALADINUS_WRAPPER_PATH),
                    "-d", str(new_domain_file),
                    "-p", str(new_problem_file),
                    "-a", str(args.algorithm),
                    "--heuristic", str(args.heuristic),
                    "--working-dir", str(working_dir)]
    elif args.planner == "fd":
        cli_args = [str(FD_WRAPPER_PATH),
                    "-d", str(new_domain_file),
                    "-p", str(new_problem_file),
                    "-a", str(args.algorithm),
                    "--heuristic", str(args.heuristic),
                    "--working-dir", str(working_dir)]
    else:
        raise ValueError
    launch(cli_args)
    end_tool = datetime.datetime.now()
    end_tool_time = end_tool - end_compilation
    print(f"Tool time: {end_tool_time.total_seconds()} seconds")
    elapsed = end_tool - start
    print(f"Total time: {elapsed.total_seconds()} seconds")
