#!/usr/bin/env python3
import argparse
import contextlib
import inspect
import os
import signal
import sys
from pathlib import Path
from subprocess import Popen
from typing import Generator

PACKAGE_ROOT = Path(inspect.getframeinfo(inspect.currentframe()).filename).parent  # type: ignore
REPO_ROOT = PACKAGE_ROOT.parent

MYND_DIR = (REPO_ROOT / "third_party" / "myND").resolve()  # type: ignore
MYND_SRC_DIR = MYND_DIR / "src"
OUTPUT_DIR = REPO_ROOT


@contextlib.contextmanager
def cd(path: os.PathLike) -> Generator:  # pylint: disable=invalid-name
    """Change working directory temporarily."""
    old_path = Path.cwd()
    os.chdir(path)
    try:
        yield
    finally:
        os.chdir(str(old_path))


def launch(cmd, cwd=None):
    """Launch a command."""
    print("Running command: ", " ".join(map(str, cmd)))
    process = Popen(
        args=cmd,
        encoding="utf-8",
        cwd=cwd,
    )
    try:
        process.wait()
    except KeyboardInterrupt:
        print("Interrupted")
    finally:
        try:
            print("do killpg")
            os.killpg(os.getpgid(process.pid), signal.SIGTERM)
        except:
            print("killpg failed")
        if process.returncode != 0:
            raise Exception(f"return code {process.returncode}")


def plan(domain_path, problem_path, strong, heuristic):
    """Planning for temporally extended goals (LTLf or PLTLf)."""
    domain_path = str(Path(domain_path).absolute())
    problem_path = str(Path(problem_path).absolute())
    search = "laostar"
    if strong:
        search = "aostar"
    translate_command = [sys.executable, f"{MYND_DIR}/translator-fond/translate.py", f"{domain_path}",
                         f"{problem_path}"]
    launch(translate_command)
    output_sas = Path("output.sas").absolute()
    planner_command = ["java", "-Xmx4g", "mynd.MyNDPlanner", f"-{search}", f"-{heuristic}", str(output_sas)]
    print("Start planner")
    launch(planner_command, cwd=str(MYND_SRC_DIR))
    output_sas.unlink()


if __name__ == '__main__':
    """
    Usage: python mynd_wrapper.py -d <DOMAIN-PATH> -p <PROBLEM-PATH> -s <STRONG>
    """
    parser = argparse.ArgumentParser(description="Wrapper for mynd.")
    parser.add_argument('-d', dest='domain_path', type=Path, required=True)
    parser.add_argument('-p', dest='problem_path', type=Path, required=True)
    parser.add_argument('-s', dest='strong', type=int, choices={0, 1}, required=True)
    parser.add_argument('--heuristic', dest='heuristic', type=str, choices={"ff"}, default="ff")
    args = parser.parse_args()

    domain_path = args.domain_path
    problem_path = args.problem_path
    strong = args.strong
    heuristic = args.heuristic

    plan(domain_path, problem_path, strong, heuristic)
