#!/usr/bin/env python3
import argparse
import datetime
import shutil
import sys
import tempfile
from pathlib import Path

from bin.utils import SUPPORTED_PLANNERS, HEURISTICS, ALGORITHMS, LTLFOND2FOND_DIR, launch, MYND_WRAPPER_PATH, \
    FD_WRAPPER_PATH, PALADINUS_WRAPPER_PATH

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Wrapper for FOND4LTLfPLTLf.")
    parser.add_argument('-d', dest='domain_path', type=Path, required=True)
    parser.add_argument('-p', dest='problem_path', type=Path, required=True)
    parser.add_argument('-g', dest='goal', type=str, required=True)
    parser.add_argument('-t', dest='planner', type=str, choices=SUPPORTED_PLANNERS, required=True)
    parser.add_argument('-a', "--algorithm", dest='algorithm', type=str, choices=ALGORITHMS, required=True)
    parser.add_argument('--heuristic', dest='heuristic', type=str, choices=HEURISTICS, default="ff")
    parser.add_argument('--working-dir', dest='working_dir', type=str, default=None)
    args = parser.parse_args()

    if args.working_dir:
        working_dir = Path(args.working_dir)
        working_dir.mkdir()
    else:
        working_dir = Path(tempfile.mkdtemp())

    start = datetime.datetime.now()
    domain_path_absolute = Path(args.domain_path).absolute()
    problem_path_absolute = Path(args.problem_path).absolute()

    goal_path = working_dir / "goal.ltl"
    goal_path.write_text(args.goal)
    launch([sys.executable, str(LTLFOND2FOND_DIR / "convert-finite.py"),
            str(domain_path_absolute),
            str(problem_path_absolute),
            str(goal_path.absolute()),
            ], cwd=str(LTLFOND2FOND_DIR))
    end_compilation = datetime.datetime.now()
    elapsed_time_compilation = (end_compilation.timestamp() - start.timestamp())
    print(f"Compilation time: {elapsed_time_compilation} seconds")

    compiled_domain_file = LTLFOND2FOND_DIR / "compiled_domain.pddl"
    compiled_problem_file = LTLFOND2FOND_DIR / "compiled_problem.pddl"
    new_domain_file = working_dir / "compiled_domain.pddl"
    new_problem_file = working_dir / "compiled_problem.pddl"
    shutil.move(compiled_domain_file, new_domain_file)
    shutil.move(compiled_problem_file, new_problem_file)

    cli_args = []
    if args.planner == "mynd":
        cli_args = [str(MYND_WRAPPER_PATH),
                    "-d", str(new_domain_file),
                    "-p", str(new_problem_file),
                    "-a", str(args.algorithm),
                    "--heuristic", str(args.heuristic),
                    "--working-dir", str(working_dir)]
    elif args.planner == "paladinus":
        cli_args = [str(PALADINUS_WRAPPER_PATH),
                    "-d", str(new_domain_file),
                    "-p", str(new_problem_file),
                    "-a", str(args.algorithm),
                    "--heuristic", str(args.heuristic),
                    "--working-dir", str(working_dir)]
    elif args.planner == "fd":
        cli_args = [str(FD_WRAPPER_PATH),
                    "-d", str(new_domain_file),
                    "-p", str(new_problem_file),
                    "-a", str(args.algorithm),
                    "--heuristic", str(args.heuristic),
                    "--working-dir", str(working_dir)]
    else:
        raise ValueError
    launch(cli_args)
    end_tool = datetime.datetime.now()
    end_tool_time = end_tool - end_compilation
    print(f"Tool time: {end_tool_time.total_seconds()} seconds")
    elapsed = end_tool - start
    print(f"Total time: {elapsed.total_seconds()} seconds")