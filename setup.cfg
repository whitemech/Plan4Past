[metadata]
name=planning-with-past
author=Francesco Fuggitti <fuggitti@diag.uniroma1.it>, Marco Favorito <favorito@diag.uniroma1.it>
version = attr: planning_with_past.__version__
description = Classical and FOND Planning for Past Temporal Goals.
long_description = file: README.md, CHANGELOG.md, LICENSE
long_description_content_type = "text/markdown"
keywords = planning temporal goals
license = GPL-3.0-or-later
license_file = LICENSE
classifiers =
    Intended Audience :: Developers
    Environment :: Console
    Environment :: Web Environment
    Development Status :: 2 - Pre-Alpha
    Intended Audience :: Developers
    License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)'
    Natural Language :: English
    Operating System :: MacOS
    Operating System :: Unix
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.7
    Topic :: Communications
    Topic :: Internet
    Topic :: Scientific/Engineering
    Topic :: Software Development
    Topic :: System


[option.project_urls]
"Bug Reports": "https://github.com/whitemech/planning-with-past/issues"
"Source": "https://github.com/whitemech/planning-with-past"

[options]
zip_safe = False
include_package_data = True
packages = find:
scripts =
install_requires =
    networkx[default,extra]>=2.5.1,<3.0.0
    click

python_requires= >=3.7

[options.package_data]
* = *.txt, *.md

[options.packages.find]
include =
    planning_with_past*
exclude =

[bdist_wheel]
universal = 1

[aliases]
test = pytest


[flake8]
ignore = W503
exclude =
    .tox,
    .git,
    __pycache__,
    build,
    dist,
    tests/fixtures/*,
    *.md,
    *.pyc,
    *.egg-info,
    .cache,
    .eggs,
    planning_with_past/__init__.py,
    scripts/whitelist.py
max-complexity = 10
max-line-length = 120

[isort]
multi_line_output=3
include_trailing_comma=True
force_grid_wrap=0
use_parentheses=True
line_length=88

[black]
exclude = "scripts/whitelist.py

[mypy]
python_version = 3.7
strict_optional = True

[darglint]
docstring_style=sphinx
strictness=short
ignore_regex=
ignore=DAR401

# Per-module options:

[mypy-pddl.*]
ignore_missing_imports = True

[mypy-networkx.*]
ignore_missing_imports = True

# Per-module options for tests dir:

[mypy-pytest]
ignore_missing_imports = True

# Per-script options
[mypy-scripts/whitelist]
ignore_errors = True
