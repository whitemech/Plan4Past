(define (domain blocks-domain)
    (:requirements :conditional-effects :derived-predicates :negative-preconditions :strips)
    (:types block)
    (:predicates (Oon_b1_b2-and-YOon_b2_b3) (Oon_b2_b3) (act) (clear ?x) (emptyhand) (holding ?x) (on ?x ?y) (ontable ?x) (val_Oon_b1_b2-and-YOon_b2_b3) (val_Oon_b2_b3) (val_YOon_b2_b3) (val_on_b1_b2) (val_on_b1_b2-and-YOon_b2_b3) (val_on_b2_b3))
    (:derived (val_Oon_b1_b2-and-YOon_b2_b3) (or (val_on_b1_b2-and-YOon_b2_b3) (Oon_b1_b2-and-YOon_b2_b3)))
     (:derived (val_Oon_b2_b3) (or (val_on_b2_b3) (Oon_b2_b3)))
     (:derived (val_YOon_b2_b3) (Oon_b2_b3))
     (:derived (val_on_b1_b2) (on b1 b2))
     (:derived (val_on_b1_b2-and-YOon_b2_b3) (and (val_on_b1_b2) (val_YOon_b2_b3)))
     (:derived (val_on_b2_b3) (on b2 b3))
    (:action pick-up
        :parameters (?x)
        :precondition (and (clear ?x) (ontable ?x) (emptyhand) (act))
        :effect (and (and (not (ontable ?x)) (not (clear ?x)) (not (emptyhand)) (holding ?x)) (not (act)))
    )
     (:action prog
        :parameters ()
        :precondition (not (act))
        :effect (and (when (val_Oon_b2_b3) (Oon_b2_b3)) (when (val_Oon_b1_b2-and-YOon_b2_b3) (Oon_b1_b2-and-YOon_b2_b3)) (act))
    )
     (:action put-down
        :parameters (?x)
        :precondition (and (holding ?x) (act))
        :effect (and (and (not (holding ?x)) (clear ?x) (emptyhand) (ontable ?x)) (not (act)))
    )
     (:action stack
        :parameters (?x ?y)
        :precondition (and (holding ?x) (clear ?y) (act))
        :effect (and (and (not (holding ?x)) (not (clear ?y)) (clear ?x) (emptyhand) (on ?x ?y)) (not (act)))
    )
     (:action unstack
        :parameters (?x ?y)
        :precondition (and (on ?x ?y) (clear ?x) (emptyhand) (act))
        :effect (and (and (holding ?x) (clear ?y) (not (clear ?x)) (not (emptyhand)) (not (on ?x ?y))) (not (act)))
    )
)